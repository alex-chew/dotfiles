set nocompatible
set encoding=utf-8
scriptencoding utf-8

" Backup/swap files
set backupcopy=yes
set backupdir=~/.vim/backup
set directory=~/.vim/backup



""" Global mapping options

" Easier :
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Leader keys
let mapleader = "\<Space>"
let maplocalleader = "\\"

" No delay when pressing Esc
set timeoutlen=1000 ttimeoutlen=0



""" Display

set laststatus=2
set showcmd
set noshowmode

" Colors
if has("termguicolors")
  set termguicolors
endif
let base16colorspace=256
set background={{ vim.background }}

" Show invisibles
set list
set listchars=tab:»\ ,trail:·
let &showbreak = '↳ '

" Conceal
let g:tex_conceal = 'admg'

" Line highlighting/numbering
set number
set relativenumber
set cursorline
set colorcolumn=80

" Matching brackets
set showmatch

" No bells
set noerrorbells visualbell t_vb=
autocmd GuiEnter * set visualbell t_vb=

" Gui stuff
set guioptions-=mrLtT
if has('win32')
  set guifont=Consolas:h11:cANSI
elseif has('unix')
  set guifont=Roboto\ Mono\ 11
endif



""" Navigation

" Correct backspace/movement wrapping
set backspace=indent,eol,start
set whichwrap+=<,>,h,l,[,]
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Better wrapping behavior
set breakindent
set display=lastline

" Scrolloff
set scrolloff=5
set sidescrolloff=5

" Folding
nnoremap , za
vnoremap , zf
set foldlevelstart=99

" Netrw navigation
nnoremap <F1> :Vex<CR>
let g:netrw_liststyle=3

" Buffer navigation
nnoremap <BS> <C-^>
nnoremap <F4> :registers<CR>
nnoremap <F5> :TagbarOpenAutoClose<CR>
set hidden
let g:netrw_altfile = 1

" Split nagivation
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
set splitright
set splitbelow



""" Editing

" Indentation
set autoindent
set smartindent
set cindent
set cinoptions=g0
set tabstop=4
set softtabstop=2
set shiftwidth=2
set expandtab

nnoremap <Left> <<
nnoremap <Right> >>
vnoremap <Left> <gv
vnoremap <Right> >gv

" Filetype extras
filetype plugin indent on



""" Command-line behavior

" Search
set incsearch
set hlsearch
set ignorecase smartcase
let @/ = ""
nnoremap <leader>n :noh<CR>

" Completion options
set path=.,**
set wildmode=list,full
set wildmenu

" Build systems
nnoremap <F10> :lwindow<CR>
" No qf in :ls/:bn/etc, and use abs line numbers (from romainl's vim-qf)
autocmd FileType qf set nobuflisted | setlocal norelativenumber number



""" Plugins

let g:python_host_prog =  $HOME . '/.pyenv/versions/neovim-python2/bin/python'
let g:python3_host_prog = $HOME . '/.pyenv/versions/neovim-python3/bin/python'

call plug#begin('~/.vim/plugged')

Plug 'bitc/lushtags'
Plug 'chriskempson/base16-vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'wellle/targets.vim'

Plug 'airblade/vim-gitgutter'
set updatetime=1000

Plug 'neoclide/coc.nvim', {'branch': 'release'}
nnoremap <leader><leader> :call CocAction('doHover')<CR>
nnoremap <leader>ll :CocList<CR>
nnoremap <leader>la <Plug>(coc-codeaction-selected)
vnoremap <leader>la <Plug>(coc-codeaction-selected)
nnoremap <leader>lA <Plug>(coc-codeaction)
nnoremap <leader>ld <Plug>(coc-definition)
nnoremap <leader>ly <Plug>(coc-type-definition)
nnoremap <leader>li <Plug>(coc-implementation)
nnoremap <leader>lr <Plug>(coc-references)
nnoremap <leader>lf <Plug>(coc-format-selected)
vnoremap <leader>lf <Plug>(coc-format-selected)
nnoremap <leader>lF <Plug>(coc-format)
nnoremap <leader>ln <Plug>(coc-rename)
nnoremap <leader>lh :call CocActionAsync('highlight')<CR>
nnoremap <leader>lx <Plug>(coc-fix-current)
nnoremap <leader>l[ <Plug>(coc-diagnostic-prev)
nnoremap <leader>l] <Plug>(coc-diagnostic-next)
Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-rls', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}

Plug 'epeli/slimux'
nnoremap <silent> <leader>x :SlimuxREPLSendLine<CR>
vnoremap <silent> <leader>x :SlimuxREPLSendSelection<CR>

Plug 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
let g:fzf_buffers_jump = 1
let $FZF_DEFAULT_COMMAND = 'fd --type f'
nnoremap <leader>a :Ag<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>F :Files <C-R>=expand('%:h')<CR><CR>
nnoremap <leader>i :Lines<CR>
nnoremap <leader>I :BLines<CR>
nnoremap <leader>m :Marks<CR>
nnoremap <leader>o :History<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>T :BTags<CR>

Plug 'lervag/vimtex'
let g:vimtex_compiler_latexmk = {'build_dir' : 'out'}
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_view_method = 'zathura'

Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_invert_selection = 0
let g:gruvbox_italic = 1
let g:gruvbox_italicize_strings = 0

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = '{{ vim.airline_theme }}'
let g:airline_solarized_bg = '{{ vim.background }}'
let g:airline_powerline_fonts = 0
let g:airline_symbols_ascii = 1
let g:airline_extensions = ['tabline', 'tagbar']
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#tab_nr_type = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

Plug 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1
let delimitMate_nesting_quotes = ['`', '"', "'"]

Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['latex']

Plug 'SirVer/ultisnips'
let g:UltiSnipsSnippetDirectories = [$HOME . '/.vim/UltiSnips']

Plug 'tpope/vim-commentary'
autocmd FileType c,cpp,h,hpp setlocal commentstring=//\ %s
autocmd FileType ocaml setlocal commentstring=(*\ %s\ *)

Plug 'tpope/vim-fugitive'
nnoremap <leader>gs :Gstatus<CR>

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#modules#enabled =
      \ ['command', 'folding', 'formatting', 'hypertext', 'toc']
let g:pandoc#modules#disabled = ['chdir']
let g:pandoc#command#autoexec_on_writes = 1
let g:pandoc#folding#fdc = 0
let g:pandoc#formatting#equalprg =
      \ 'pandoc -t markdown --atx-headers --wrap=preserve'
      \ . ' -F ~/.pandoc/filters/checklist.py'
let g:pandoc#syntax#use_definition_lists = 0
nnoremap <leader>ww :cd ~/wiki/ \| Files<CR>

Plug 'w0rp/ale'
let g:ale_echo_msg_format = '%s [%linter% %severity%] %(code)%'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_lint_on_text_changed = 'never'
nmap <silent> <C-P> <Plug>(ale_detail)
nmap <silent> <Up> <Plug>(ale_previous_wrap)
nmap <silent> <Down> <Plug>(ale_next_wrap)
nmap <silent> <F9> <Plug>(ale_fix)
let g:ale_linters = {
      \ 'haskell': ['stack-ghc'],
      \ 'python': ['flake8', 'pylint'],
      \ 'rust': ['rls', 'cargo'],
      \ }
let g:ale_fixers = {
      \ 'haskell': ['hfmt'],
      \ 'javascript': ['prettier'],
      \ 'css': ['prettier'],
      \ 'rust': ['rustfmt'],
      \ }
let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')

call plug#end()



" Set colorscheme after plugin section for plugin-added colorschemes
color {{ vim.color }}
